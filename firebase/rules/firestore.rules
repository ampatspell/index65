service cloud.firestore {
  match /databases/{database}/documents {

    function auth() {
      return request.auth;
    }

    function isSignedIn() {
      return auth() != null;
    }

    function isMember() {
      return isSignedIn();
    }

    function getUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getUserRoles() {
      return getUser().roles;
    }

    function hasRole(name) {
      return isSignedIn() && name in getUserRoles();
    }

    function isAdmin() {
      return hasRole('admin');
    }

    function hasKeys(hash, keys) {
      return
        hash.size() == keys.size() &&
        hash.keys().hasAll(keys);
    }

    match /users/{uid} {
      allow list: if isAdmin();
      allow get: if uid == auth().uid || isAdmin();
      allow write: if isAdmin();
    }

    match /sources/{source} {

      function isValid(data) {
        return
          hasKeys(data, [ 'name' ]) &&
          data.name is string;
      }

      allow read: if isMember();
      allow write: if isAdmin() && isValid(request.resource.data);

      match /collections/{collection} {

        function isValid(data) {
          return
            hasKeys(data, [ 'name' ]) &&
            data.name is string;
        }

        allow read: if isMember();
        allow write: if isAdmin() && isValid(request.resource.data);

        match /groups/{group} {

          function isValid(data) {
            return
              hasKeys(data, [ 'identifier' ]) &&
              data.identifier is int;
          }

          allow read: if isMember();
          allow write: if isAdmin() && isValid(request.resource.data);

          match /images/{image} {
            allow read: if isMember();
            allow write: if false;
          }
        }
      }
    }

  }

}
